const e=async e=>new Promise(t=>e<1?t():setTimeout(t,e));async function t(t,r,o){const{interval:l,timeout:a}=o||{};if("number"!=typeof l||l<0)throw new TypeError(`Expected 'interval' to be a valid number, but received '${l}'`);if("number"!=typeof a)throw new TypeError(`Expected 'timeout' to be a valid number, but received '${a}'`);try{const o=window.performance,s=+l,n=+a,p=a<1;let i,m=0,c=0,u=0,d=0,w=!1;o.mark("poll starts");do{o.mark(`poll ${d} starts`),m=o.now(),i=await t(),o.mark(`poll ${d} ends`),c=o.now();const l=Math.ceil(c-m);if(w=!!p||u<n&&!r(i),u+=l>s?l:s,o.measure(`poll ${d} takes`,`poll ${d} starts`,`poll ${d} ends`),!w)break;await e(s-l),o.mark("next poll starts"),o.measure(`poll ${d+1} starts after`,`poll ${d} ends`,"next poll starts"),d+=1}while(w);return o.mark("poll ends"),o.measure("poll spent","poll starts","poll ends"),i}catch(e){throw e}}export default t;export{t as asyncPoll};
//# sourceMappingURL=async-poll.js.map

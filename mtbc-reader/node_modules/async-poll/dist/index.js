"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var perf_hooks=require("perf_hooks");async function delay(e){return new Promise(r=>e<1?process.nextTick(r):setTimeout(r,e))}async function asyncPoll(e,r,o){const{interval:t,timeout:s}=o||{};if("number"!=typeof t||t<0)throw new TypeError(`Expected 'interval' to be a valid number, but received '${t}'`);if("number"!=typeof s)throw new TypeError(`Expected 'timeout' to be a valid number, but received '${s}'`);try{const o=+t,a=+s,l=s<1;let p,n=0,c=0,f=0,m=0,i=!1;perf_hooks.performance.mark("poll starts");do{perf_hooks.performance.mark(`poll ${m} starts`),n=perf_hooks.performance.now(),p=await e(),perf_hooks.performance.mark(`poll ${m} ends`),c=perf_hooks.performance.now();const t=Math.ceil(c-n);if(i=!!l||f<a&&!r(p),f+=t>o?t:o,perf_hooks.performance.measure(`poll ${m} takes`,`poll ${m} starts`,`poll ${m} ends`),!i)break;await delay(o-t),perf_hooks.performance.mark("next poll starts"),perf_hooks.performance.measure(`poll ${m+1} starts after`,`poll ${m} ends`,"next poll starts"),m+=1}while(i);return perf_hooks.performance.mark("poll ends"),perf_hooks.performance.measure("poll spent","poll starts","poll ends"),p}catch(e){throw e}}exports.asyncPoll=asyncPoll,exports.default=asyncPoll;
//# sourceMappingURL=index.js.map
